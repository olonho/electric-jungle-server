

<%@ page contentType="text/html; charset=windows-1251" %>

     

      

      

      <h2>Анонс</h2>
<p>Соревнование в программировании на Java, в котором игроки создают алгоритмы поведения групп виртуальных существ, состязающихся за ограниченный ресурс или совместно его использующих. 
В этом проекте применяется широкий спектр клиентских и серверных Java-технологий.</p>
<h2>Законы Электрических Джунглей</h2>
<h3>Обозначения</h3>
<ul>
    <li>X% МЭ - количество энергии в процентах от максимальной энергии существа</li>

    <li><code>K_someconst</code>(5) - постоянная определяющая параметр игры (все постоянные определены в <code>Constants.java</code>).     В скобках указано текущее значение. Для большинства констант эти значения сохранятся, однако возможны и изменения.</li>
</ul>
<h3> Понятия и цели</h3>
<p>В мире  Электрических Джунглей (ЭД) основная цель &ndash; максимальная видовая экспансия.</p>
<p>Каждый игрок программирует поведение своих существ таким образом, чтобы его вид как целое добился максимального результата. Критерием успешности вида является суммарная биомасса всего вида    (сумма масс всех особей) через некоторое количество ходов.</p>
<p>Пространство и время. В ЭД пространство устроено как двумерное дискретное поле из клеток, закольцованное по краям  (так что получается тор). Впрочем, возможны и другие топологии и размерности. Время состоит из последовательности
ходов, во время хода каждому существу даётся шанс совершить своё действие, когда все совершат свои действия - начинается следующий ход. 
 В общем случае порядок выполнения действий не определён, разные существа могут совершать действия одновременно.</p>

<p>Каждое существо в ЭД обладает двумя базовыми характеристиками: массой и скоростью, а также в каждый момент времени характеризуется энергетическим уровнем.     Масса совпадает с максимальной энергией (МЭ), которой может обладать существо.     Если энергетический уровень падает ниже <code>K_emin</code>(15)% МЭ - существо умирает и вся его оставшаяся энергия   доступна для потребления другими существами. Масса не может быть больше <code>K_maxmass</code>(1000) и меньше  <code>K_minmass</code>(0.1). Скорость не может быть больше <code>K_maxspeed</code>(10) и меньше  <code>K_minspeed</code>(1).  </p>
<p> Масса определяет количество очков игрока (биомасса вида есть сумма масс всех живых существ вида),     энергоёмкость, энергопотребление за ход и повреждение, наносимое в битве.</p>
<p>Скорость определяет максимальное расстояние, на которое может передвигаться существо за один ход. Однако, <br />

чем больше скорость, тем энергетически дороже передвижение существа. Вне зависимости от скорости, &nbsp;<br />
существо может получать информацию только о точке, где оно находится, а также о соседних точках.</p>
<p>Энергия является основой существования в ЭД. Любое действие (даже просто выживание) требует <br />
потребления некоторого количества энергии. В начале игры на поле случайным образом размещаются источники <br />
энергии, из которых существа могут черпать энергию (не более 10% МЭ за ход). Источники постепенно возобновляют энергию. &nbsp;<br />
Начальное количество энергии и скорость ее роста случайны и различны для разных источников. На поле имеется <br />
NUM_REGULAR(100) обычных источников и NUM_GOLDEN(3) золотых источников, производящих гораздо больше энергии. 
Хотя в различных играх энергия и прирост по разному распределены на поле, суммарная энергия и прирост всегда
одинаковы. </p>
<p>Информация о внешнем мире. Существо может получить информацию о внешнем мире при помощи API    <code>BeingIntreface</code> и <code>PointInfo</code>. Доступна следуюшая информация:  </p>

<ul>
    <li>Количество энергии самого существа</li>
    <li>Владелец и масса любого существа, находящегося достаточно близко (на той же клетке или на примыкающих клетках)</li>
    <li>Количество энергии, скорость её прироста и максимальная ёмкость в клетке</li>
    <li>Список всех объектов в данной точке (в частности, других существ)</li>
    <li>Суммарная масса всех живых существ в данной точке</li>
</ul>

<p>&nbsp;</p>
<h3> Действия и события </h3>
Существо каждый ход может совершить одно действие, а также получает нотификации о происходяших с ним событиях. Доступны следующие действия (см. <code>EventKind.java</code>):
<ul>
    <li><code>ACTION_MOVE_TO</code> - Перейти в другую клетку. Доступность клетки определяется скоростью существа. Стоит  <code>K_movecost</code>(1)% скорости.</li>
    <li><code>ACTION_EAT</code> - Потребить энергию. Количество энергии, которую можно потребить за ход не может превышать энергоемкости и не может быть больше <code>K_bite</code>(10)% МЭ. Бесплатно.</li>

    <li><code>ACTION_GIVE</code> - Передать энергию другому существу. Бесплатно.</li>
    <li><code>ACTION_ATTACK</code> - Атаковать другое существо, нанося повреждение в <code>K_fight</code>(20)% МЭ. При этом теряется  <code>K_fightcost</code>(1)% собственной МЭ + <code>K_retaliate</code>(5)% МЭ атакуемого существа.<br />
    </li>

    <li><code>ACTION_BORN</code> - Породить другое существо, возможно со немного отличающимися (не более чем на&nbsp; <code>K_minbornvariation</code>(0.8)/<code>K_maxbornvariation</code>(1.2)) массой и скоростью. Энергия при этом делится пополам. Рождение возможно только тогда, когда у существа достаточно энергии <code>K_toborn</code>(80%). Акт  рождения стоит <code>K_borncost</code>(20)% МЭ. При этом существу можно передать &quot;генокод&quot; - произвольный Java объект.</li>

    <li><code>ACTION_MOVE_ATTACK</code> - Совмещённо двигаться и атаковать, при этом наносится меньше <code>K_fightmovepenalty</code>(0.75) повреждений. Стоимость совпадает с суммарной стоимостью атаки и передвижения.</li>
</ul>
<p>Также существо получает нотификации о следующих событиях: </p>
<ul>
    <li><code>BEING_BORN</code> - Первая нотификация, которую существо получает после рождения. Можно проинициализировать различные параметры.</li>
    <li><code>BEING_DEAD</code> - Последняя нотификация, передаётся перед смертью существа.</li>

    <li><code>BEING_ATTACKED</code> - Существо атаковано кем-то, id аттакующего  передаётся как параметр.</li>
    <li><code>BEING_ENERGY_GIVEN</code> - Кто-то передал нам энергию.</li>
</ul>
<h3>Игра</h3>
<p> Игра начинается с помещения одного существа каждого игрока в случайную точку пространства, при этом один раз вызывается метод  <code>reinit(),</code> информирующий о текущих условиях игры и позволяющей переинициализировать статические переменные.  Параметры данного существа определяются тем, что вернёт метод Being.getParams(). Параметры всех остальных существ определяются параметрами действия <code>ACTION_BORN</code>.  После этого у каждого существа есть возможность попытаться добиться победы в заданных условиях, см. далее.</p>

<p>Виды игр (см. <code>GameKind.java</code>):</p>
<ol>
    <li>Блицкриг - <code>SINGLE</code><br />
    Одному виду существ дается весь мир. Цель &ndash; добиться наивысшего рейтинга путем         максимально эффективного использования ресурсов и быстрой разведки за данный временной интервал (200 ходов).</li>
    <li>Дуэль - <code>DUEL</code><br />

    Два конкурирующих вида существ. Возможны атаки на существа других видов (1000 ходов)</li>
    <li>Джунгли - <code>JUNGLE</code><br />
    До 8-ми конкурирующих видов вместе (2000 ходов).</li>
</ol>

<a name="contest"></a>
<h2>Конкурс</h2>
Победитель конкурса будет определён следующим образом:
<ol>
    <li>Для участия в конкурсе необходимо зарегистрироваться на сайте <a href="http://electricjungle.ru/">http://electricjungle.ru/</a>     ,&nbsp; загрузить JAR-файл с исполняемым кодом своего существа и пометить его      меткой &quot;Для состязания&quot;. Oдин пользователь может иметь не более 10 загруженных на сервер существ, из которых не более двух могут быть помечены меткой &quot;Для состязания&quot;.</li>

    <li>Автоматическая система рейтинга будет ежедневно запускать состязания в режиме &quot;дуэль&quot; для всех существ, загруженных в базу и помеченных      &quot;Для состязания&quot;. Если ваше существо победило в дуэли - ему даётся 1 очко, если никто не выжил - никому ничего не даётся. По сумме очков      ежедневно определяется двадцатка лидеров. Если у двух конкурентов одинаковое количество побед, между ними проводятся дополнительные дуэли.</li>
    <li>Из двадцатки лидеров на 22 января 2007 года будет отобрана пятёрка по результатам матчей типа &quot;дуэль&quot; внутри двадцатки. </li>
    <li>Внутри пятёрки будет проведено состязание по системе &quot;дуэль&quot; и победитель получит главный приз от компании Sun Microsystems.       Все финальные игры будут записаны, а также будут транслироваться в режиме реального времени.</li>

</ol>
Кроме этого будет определён победитель в категории &quot;блицкриг&quot; - по абсолютному рейтингу среди всех существ, и в категории &quot;джунгли&quot;  - по олимпийской системе по результатам случайной жеребьёвки. Они также получат призы от компании Sun Microsystems.
<h2>Технические детали</h2>
<h3>Кодирование</h3>
<p> Задача игрока &ndash; реализовать метод <code>makeTurn()</code> интерфейса <code>Being</code>. В качестве примера можно  использовать класс <code>SimpleBeing</code>, а начинать удобно с заготовки <code>BeingTemplate</code>.   Разработку можно вести в среде NetBeans, или с использованием только текстового редактора (движок может вызывать компилятор автоматически,  см. <code>README.txt</code> для более подробных инструкций). Предоставляются исходные тексты движка, хотя возможно внесение небольших изменений в версию, используемую для окончательных прогонов, определяющих победителя. <br />

</p>
<p> <strong> Примечание</strong>: внимательно изучите файл <code>Constants.java</code>, он содержит полезную информацию о мире и является важным источником документации наряду с исходными текстами движка.</p>
<p> За неделю до окончания конкурса код движка будет заморожен, чтобы дать игрокам возможность точной подстройки под финальную версию.  </p>
<h3>Безопасность:</h3>
<p>Игра снабжена системой безопасности (по умолчанию выключена). Перед состязанием рекомендуется проверить существа,  вызвав игру с параметром <code>-secure</code> (также необходимо изменить политику Java, включив в нее содержание файла  <code>java.policy</code>).</p>

<h3 class="hunderline">Советы, замечания</h3>
<ul>
    <li> Движок оптимизирован для выполнения на многоядерных и многопроцессорных машинах, например,  <a href="http://www.sun.com/processors/UltraSPARC-T1/">Ниагара</a>.  Таким образом, возможно одновременное выполнение <code>makeTurn()</code> для одного вида на разных ядрах  или процессорах, а значит, доступ к разделяемым данным (например к статическим переменным) должен быть  синхронизован. Также реализация <code>makeTurn()</code> и <code>processEvent()</code> должна быть синхронизована.  </li>

    <li>Выполнение <code>makeTurn()</code> должно завершаться за относительно небольшое время, иначе  движок удалит ваше существо с игрового поля. Так как конкретные значения таймаута зависят от количества  существ и общей загрузки сервера, постарайтесь избежать использования долго выполняющихся алгоритмов.  </li>
</ul>
